#!/usr/bin/env python
"""
Config0 Resource Sync Tool

This script synchronizes resources to a shared location in the Config0 platform.
It can be executed either by providing environmental variables or by passing a JSON input as an argument.

Usage:
    ./script.py [json_input]

Required Environment Variables:
    CONFIG0_APP_NAME - The name of the Config0 application

For 'create' method, additional environment variables needed:
    JOB_INSTANCE_ID
    SCHEDULE_ID
    RUN_ID
    METHOD

The script will exit with code 4 if required variables are missing or if an unsupported method is requested.
"""

# Copyright 2025 Gary Leong <gary@config0.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os
import sys

from config0_publisher.loggerly import Config0Logger
from config0_publisher.resource.manage import ResourceCmdHelper


class Main(ResourceCmdHelper):
    """
    Main class for handling resource synchronization to shared location.
    Inherits functionality from ResourceCmdHelper.
    """

    def __init__(self, **kwargs):
        """Initialize the sync tool with required parameters."""
        ResourceCmdHelper.__init__(
            self,
            app_name=kwargs["app_name"],
            set_must_exists=["stateful_id"]
        )

        self.classname = 'SYNC_TO_SHARE'
        self.logger = Config0Logger(self.classname, logcategory="cloudprovider")
        self.logger.debug(f"Instantiating {self.classname}")
        self.set_inputargs(add_app_vars=True)

    def create(self):
        """Execute the synchronization process."""
        self.sync_to_share()


def usage():
    """Display usage information and exit."""
    print("""
Script usage:
    ./script.py [json_input]
    
Alternatively, use with environmental variables:

Required for all operations:
    CONFIG0_APP_NAME - The application name

Required for 'create' method:
    JOB_INSTANCE_ID
    SCHEDULE_ID
    RUN_ID
    METHOD
    """)
    sys.exit(4)


if __name__ == '__main__':
    # Try to get JSON input from arguments
    try:
        json_input = sys.argv[1]
    except IndexError:
        json_input = None

    # Check for required environment variable
    if not os.environ.get("CONFIG0_APP_NAME"):
        print('Environmental Variable "CONFIG0_APP_NAME" needs to be set!')
        sys.exit(4)

    # Initialize main class
    main = Main(app_name=os.environ["CONFIG0_APP_NAME"].lower())

    # Process based on method
    if main.inputargs.get("method", "create") == "create":
        main.check_required_inputargs()
        main.create()
    else:
        usage()
        print(f'Method "{main.inputargs.get("method")}" not supported!')
        sys.exit(4)